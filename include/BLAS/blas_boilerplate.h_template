/** \file
 *
 *  \brief            xXYZ (BLAS-N)
 *
 *  \date             Created:  Jul 16, 2014
 *  \date             Modified: $Date$
 *
 *  \authors          mauro <mcalderara@iis.ee.ethz.ch>
 *
 *  \version          $Revision$
 */
#ifndef LINALG_BLAS_XYZ_H_
#define LINALG_BLAS_XYZ_H_

/* Organization of the namespace:
 *
 *    LinAlg::BLAS
 *        convenience bindings supporting different locations for Dense<T>
 *
 *    LinAlg::BLAS::<NAME>
 *        bindings to the <NAME> BLAS backend
 */

#include "../preprocessor.h"

#ifdef HAVE_CUDA
#include <cuda_runtime.h>
#include <cublas_v2.h>
#include "../CUDA/cuda_checks.h"
#endif

#include "../types.h"
#include "../profiling.h"
#include "../exceptions.h"
#include "../utilities/checks.h"
#include "../dense.h"
#include "../streams.h"

#ifndef DOXYGEN_SKIP
extern "C" {

  using LinAlg::I_t;
  using LinAlg::S_t;
  using LinAlg::D_t;
  using LinAlg::C_t;
  using LinAlg::Z_t;

  void fortran_name(sxyz, SXYZ)(...);
  void fortran_name(dxyz, DXYZ)(...);
  void fortran_name(cxyz, CXYZ)(...);
  void fortran_name(zxyz, ZXYZ)(...);

}
#endif


namespace LinAlg {

namespace BLAS {

namespace FORTRAN {

/** \brief            General xyz
 *
 *  Z = X + Y
 *
 *  \param[in]        transx
 *
 *  \param[in,out]    Z
 *
 *  See [DXYZ](http://www.mathkeisan.com/usersguide/man/dxyz.html)
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  fortran_name(sxyz, SXYZ)(...);

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  fortran_name(dxyz, DXYZ)(...);

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  fortran_name(cxyz, CXYZ)(...);

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  fortran_name(zxyz, ZXYZ)(...);

}

} /* namespace LinAlg::BLAS::FORTRAN */

#ifdef HAVE_CUDA
namespace cuBLAS {

/** \brief            General xyz
 *
 *  Z = X + Y
 *
 *  \param[in]        handle
 *
 *  \param[in]        transx
 *
 *  \param[in,out]    Z
 *
 *  See [cuBLAS Documentation](http://docs.nvidia.com/cuda/cublas/)
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  checkCUBLAS(cublasSxyz(...));

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  checkCUBLAS(cublasDxyz(...));

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  checkCUBLAS(cublasCxyz(...));

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  checkCUBLAS(cublasZxyz(...));

}

} /* namespace LinAlg::BLAS::cuBLAS */

using LinAlg::Utilities::check_device;
using LinAlg::Utilities::check_stream_alive;
#ifdef HAVE_CUDA
using LinAlg::Utilities::check_gpu_structures;
using LinAlg::CUDA::cuBLAS::prepare_cublas;
using LinAlg::CUDA::cuBLAS::finish_cublas;
using LinAlg::Utilities::check_stream_no_prefer_native;
#endif

// Convenience bindings (bindings for Dense<T>)
/** \brief            General xyz
 *
 *  Z = X + Y
 *
 *  \param[in]        X
 *
 *  \param[in]        Y
 *
 *  \param[in,out]    Z
 */
template <typename T>
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

#ifndef LINALG_NO_CHECKS
  check_device(..., "xXYZ()")
  ...
#endif

  auto location = ;
  auto device_id = ;

  if (location == Location::host) {

    char transa = (A._transposed) ? 'T' : 'N';
    char transb = (B._transposed) ? 'T' : 'N';

    xXYZ(...);

  }
#ifdef HAVE_CUDA
  else if (location == Location::GPU) {

# ifndef LINALG_NO_CHECKS
    check_gpu_structures("xXYZ()");
# endif

    cublasOperation_t transa = (A._transposed) ? CUBLAS_OP_T : CUBLAS_OP_N;
    cublasOperation_t transb = (B._transposed) ? CUBLAS_OP_T : CUBLAS_OP_N;

    int               prev_device = 0;
    cudaStream_t      prev_cuda_stream;
    Stream*           stream_;

# ifndef USE_LOCAL_STREAMS
    stream_ = &(LinAlg::CUDA::compute_stream[device_id]);
# else
    Stream my_stream(device_id);
    stream_ = &my_stream;
# endif

    auto handle = prepare_cublas(*stream_, &prev_device, &prev_cuda_stream);
    BLAS::cuBLAS::xXYZ(*handle, ...);
    finish_cublas(*stream_, &prev_device, &prev_cuda_stream, handle);

    stream_->sync_cuda();

  }
#endif

#ifndef LINALG_NO_CHECKS
  else {

    throw excUnimplemented("xXYZ(): BLAS-3 XYZ not supported on selected "
                           "location");

  }
#endif

}

/** \brief            General asynchronous xyz
 *
 *  Z = X + Y
 *
 *  \param[in]        X
 *
 *  \param[in]        Y
 *
 *  \param[in,out]    Z
 *
 *  \param[in,out]    stream
 *
 *  \returns          The ticket number for the operation on the stream
 */
template <typename T>
inline I_t xXYZ_async(..., Stream& stream) {

  PROFILING_FUNCTION_HEADER

#ifndef LINALG_NO_CHECKS
  check_device(..., "xXYZ_async()")
  ...
#endif

  auto location = ;
  auto device_id = ;

  I_t ticket = 0;

  if (location == Location::host) {

    if (stream.synchronous) {
      
      FORTRAN::xXYZ(...);

    } else {

      // Create a task using the synchronous variant

#ifndef LINALG_NO_CHECKS
      check_stream_alive(stream, "xXYZ_async()");
#endif

      char transa = (A._transposed) ? 'T' : 'N';
      char transb = (B._transposed) ? 'T' : 'N';

      // Arguments passed by copy, ensures memory lifetime but callee can't 
      // modify the arguments anymore
      auto task = [=]() mutable { some lambda here}

      ticket = stream.add(task);

    }

  }
#ifdef HAVE_CUDA
  else if (location == Location::GPU) {

    using LinAlg::BLAS::cuBLAS::xXYZ;

# ifndef LINALG_NO_CHECKS
    check_gpu_structures("xXYZ_async()");
    check_stream_no_prefer_native(stream, "xXYZ_async()");
    check_stream_device_id(stream, device_id, "xXYZ_async()");
# endif

    cublasOperation_t transa = (A._transposed) ? CUBLAS_OP_T : CUBLAS_OP_N;
    cublasOperation_t transb = (B._transposed) ? CUBLAS_OP_T : CUBLAS_OP_N;

    int               prev_device = 0;
    cudaStream_t      prev_cuda_stream;

    auto handle = prepare_cublas(stream, &prev_device, &prev_cuda_stream);
    BLAS::cuBLAS::xXYZ(*handle, ...);
    finish_cublas(stream, &prev_device, &prev_cuda_stream, handle);

  }
#endif

#ifndef LINALG_NO_CHECKS
  else {
    throw excUnimplemented("xXYZ_async(): BLAS-3 XYZ not supported on "
                           "selected location");
  }
#endif

  return ticket;

}

} /* namespace LinAlg::BLAS */

} /* namespace LinAlg */

#endif /* LINALG_BLAS_XYZ_H_ */
