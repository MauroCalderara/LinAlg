/** \file
 *
 *  \brief            xXYZ
 *
 *  \date             Created:  Jul 16, 2014
 *  \date             Modified: $Date$
 *
 *  \authors          mauro <mcalderara@iis.ee.ethz.ch>
 *
 *  \version          $Revision$
 */
#ifndef LINALG_LAPACK_XYZ_H_
#define LINALG_LAPACK_XYZ_H_

/* Organization of the namespace:
 *
 *    LinAlg::LAPACK
 *        convenience bindings supporting different locations for Dense<T>
 *
 *    LinAlg::LAPACK::<NAME>
 *        bindings to the <NAME> LAPACK backend
 */

#ifdef HAVE_CUDA

# include <cuda_runtime.h>
# include <cublas_v2.h>
# include "../CUDA/cuda_checks.h"

# ifdef HAVE_MAGMA
#   include <magma.h>
# endif

#endif


#include "../types.h"
#include "../profiling.h"
#include "../exceptions.h"
#include "../utilities/checks.h"
#include "../dense.h"

#ifndef DOXYGEN_SKIP
extern "C" {

  using LinAlg::I_t;
  using LinAlg::S_t;
  using LinAlg::D_t;
  using LinAlg::C_t;
  using LinAlg::Z_t;

  void fortran_name(sxyz, SXYZ)(...);
  void fortran_name(dxyz, DXYZ)(...);
  void fortran_name(cxyz, CXYZ)(...);
  void fortran_name(zxyz, ZXYZ)(...);
}
#endif

namespace LinAlg {

namespace LAPACK {

namespace FORTRAN {

/** \brief            xXYZ
 *
 *  Z <- X + Y
 *
 *  \param[in]        X
 *
 *  \param[in]        Y
 *
 *  \param[in,out]    Z
 *
 *  See [DXYZ](http://www.mathkeisan.com/usersguide/man/dxyz.html)
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  fortran_name(sxyz, SXYZ)(...);

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  fortran_name(dxyz, DXYZ)(...);

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  fortran_name(cxyz, CXYZ)(...);

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  fortran_name(zxyz, ZXYZ)(...);

}

} /* namespace FORTRAN */


#ifdef HAVE_CUDA
namespace CUBLAS {

/** \brief            xXYZ
 *
 *  Z <- X + Y
 *
 *  \param[in]        X
 *
 *  \param[in]        Y
 *
 *  \param[in,out]    Z
 *
 *  See [CUBLAS Documentation](http://docs.nvidia.com/cuda/cublas/)
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  checkCUBLAS(cublasSxyz(...));

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  checkCUBLAS(cublasDxyz(...));

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  checkCUBLAS(cublasCxyz(...));

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  checkCUBLAS(cublasZxyz(...));

}

} /* namespace LinAlg::LAPACK::CUBLAS */

#ifdef HAVE_MAGMA
namespace MAGMA {

/** \brief            xXYZ
 *
 *  Z <- X + Y
 *
 *  \param[in]        X
 *
 *  \param[in]        Y
 *
 *  \param[in,out]    Z
 *
 *  See [DXYZ](http://www.mathkeisan.com/usersguide/man/dxyz.html)
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  magma_sxyz(...);

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  magma_dxyz(...);

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  magma_cxyz(...);

}
/** \overload
 */
inline void xXYZ(...) {

  PROFILING_FUNCTION_HEADER

  magma_zxyz(...);

}
    
} /* namespace LinAlg::LAPACK::MAGMA */
#endif /* HAVE_MAGMA */
#endif /* HAVE_CUDA */

using LinAlg::Utilities::check_device;
using LinAlg::Utilities::check_input_transposed;

/** \brief            xXYZ
 *
 *  Z <- X + Y
 *
 *  \param[in]        X
 *
 *  \param[in]        Y
 *
 *  \param[in,out]    Z
 */
template <typename T>
inline void xXYZ(Dense<T>& X, Dense<int>& Y) {

  PROFILING_FUNCTION_HEADER

#ifndef LINALG_NO_CHECKS
  check_device(X, Y, "xXYZ()");
#endif /* LINALG_NO_CHECKS */

  auto device_id = ;
  auto n = ;

  if (X._location == Location::host) {
    FORTRAN::xXYZ(...);
  }
#ifdef HAVE_CUDA
  else if (X._location == Location::GPU) {

# ifndef LINALG_NO_CHECKS
  check_cublas_handles("xXYZ()");
# endif

    using LinAlg::CUDA::CUBLAS::handles;
    CUBLAS::xXYZ(handles[device_id], ...);
  }
#ifdef HAVE_MAGMA
  // check if MAGMA's or CUBLAS' XYZ is faster and use that one.
#endif
#endif

#ifndef LINALG_NO_CHECKS
  else {
    throw excUnimplemented("xXYZ(): LAPACK XYZ not supported on selected "
                           "location");
  }

  if (info != 0) {
    throw excMath("xXYZ(): error: info = %d", info);
  }
#endif

}

} /* namespace LinAlg::LAPACK */

} /* namespace LinAlg */

#endif /* LINALG_LAPACK_XYZ_H_ */
